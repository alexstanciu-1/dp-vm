# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
# vagrant plugin install vagrant-timezone
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/ubuntu-24.04"

  # config.ssh.username = "vagrant"
  config.ssh.keep_alive = true

  if Vagrant.has_plugin?("vagrant-timezone")
    config.timezone.value = :host
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  config.vm.network "forwarded_port", guest: 80, host: 8888, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true
  # config.vm.synced_folder "../..", "/desc-prog", type: "smb"
  config.vm.synced_folder "../..", "/desc-prog"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.

  config.vm.provision "shell" do |s|
    ssh_pub_key = `cat ~/.ssh/id_rsa.pub`
    ssh_pub_key.strip!
    s.inline = <<-SHELL
      useradd -m desc_prog
      usermod -G www-data,sudo desc_prog
      mkdir -p /home/desc_prog/.ssh
      chmod 0700 /home/desc_prog/.ssh
      ssh-keygen -t rsa -b 4096 -C "desc.prog@omibit.com" -f /home/desc_prog/.ssh/id_rsa
      chown desc_prog:desc_prog /home/desc_prog/.ssh -R
      chmod 0600 /home/desc_prog/.ssh/*
      echo #{ssh_pub_key} >> /home/desc_prog/.ssh/authorized_keys
      echo #{ssh_pub_key} >> /root/.ssh/authorized_keys
    SHELL
  end

  config.vm.provision "shell", inline: <<-SHELL
     DEBIAN_FRONTEND=noninteractive apt -y  --force-yes update
     DEBIAN_FRONTEND=noninteractive apt -y  --force-yes upgrade
     DEBIAN_FRONTEND=noninteractive apt install -y  --force-yes curl apache2 apache2-suexec-custom mariadb-server nodejs npm htop iotop sysstat rsync git
	 DEBIAN_FRONTEND=noninteractive add-apt-repository -y ppa:ondrej/php
	 DEBIAN_FRONTEND=noninteractive apt install -y  --force-yes php8.3 php8.3-{cli,bz2,curl,mbstring,intl,fpm,mysql} phpmyadmin
     DEBIAN_FRONTEND=noninteractive apt install -y  --force-yes php8.4 php8.4-{cli,bz2,curl,mbstring,intl,fpm,mysql} phpmyadmin
	 a2disconf php8.3-fpm
	 a2enconf php8.3-fpm
	 systemctl reload apache2
	 php /desc-prog/vm/provision/provision.php
  SHELL
end

